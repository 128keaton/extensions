!function(){function s(s,n){if(!(s instanceof n))throw new TypeError("Cannot call a class as a function")}function n(s,n){for(var a=0;a<n.length;a++){var t=n[a];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(s,t.key,t)}}function a(s,a,t){return a&&n(s.prototype,a),t&&n(s,t),s}(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"2vef":function(s,n,a){"use strict";a.r(n),n.default="import { Component } from '@angular/core';\nimport { MtxDialog } from '@ng-matero/extensions';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'dialog-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(private mtxDialog: MtxDialog, public translate: TranslateService) {\n    translate.addLangs(this.langs.map(item => item.value));\n    translate.setDefaultLang(this.defaultlang);\n  }\n\n  open() {\n    this.mtxDialog.open({\n      title: this.translate.stream('title'),\n      description: this.translate.stream('description'),\n      buttons: [\n        {\n          text: this.translate.stream('close'),\n          onClick: () => {},\n        },\n        {\n          color: 'primary',\n          text: this.translate.stream('view'),\n          onClick: () => {},\n        },\n        {\n          color: 'warn',\n          focusInitial: true,\n          text: this.translate.stream('ok'),\n          onClick: () => {},\n        },\n      ],\n    });\n  }\n\n  langs = [\n    { label: '\u4e2d\u6587\u7b80\u4f53', value: 'zh-CN' },\n    { label: 'English', value: 'en-US' },\n  ];\n  defaultlang = 'zh-CN';\n}\n"},"5WGG":function(s,n,a){"use strict";a.r(n),n.default='<h1 mat-dialog-title>Hi, {{ data.name }}</h1>\n<div mat-dialog-content>\n  <p>What\'s your favorite animal?</p>\n  <mat-form-field>\n    <input matInput [(ngModel)]="data.animal" />\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)="onNoClick()">No Thanks</button>\n  <button mat-button [mat-dialog-close]="data.animal" cdkFocusInitial>Ok</button>\n</div>\n'},"5tyQ":function(s,n,a){"use strict";a.r(n),n.default='{\n  "title": "This is the title",\n  "description": "You can write some messages here",\n  "close": "CLOSE",\n  "ok": "OK",\n  "view": "VIEW"\n}\n'},"7C1b":function(s,n,a){"use strict";a.r(n),n.default="import { Component } from '@angular/core';\nimport { MtxDialog } from '@ng-matero/extensions';\n\n@Component({\n  selector: 'dialog-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  constructor(private mtxDialog: MtxDialog) {}\n\n  alert() {\n    this.mtxDialog.alert(`My name is Zongbin!`, '', () => {\n      this.mtxDialog.alert(`Glad to meet you!`);\n    });\n  }\n\n  confirm() {\n    this.mtxDialog.confirm(\n      `What's your name?`,\n      '',\n      () => {\n        this.mtxDialog.alert(`Hi, Zongbin!`);\n      },\n      () => {\n        this.mtxDialog.alert(`I don't know.`);\n      }\n    );\n  }\n\n  open() {\n    this.mtxDialog.open({\n      title: 'This is the title',\n      description: 'You can write some messages here.',\n      showCloseIcon: true,\n      buttons: [\n        {\n          text: 'CLOSE',\n          onClick: () => {\n            this.mtxDialog.alert(`You click Close button.`);\n          },\n        },\n        {\n          color: 'primary',\n          text: 'VIEW',\n          onClick: () => {\n            this.mtxDialog.alert(`You click View button.`);\n          },\n        },\n        {\n          color: 'warn',\n          text: 'OK',\n          focusInitial: true,\n          onClick: () => {\n            this.mtxDialog.alert(`You click Ok button.`);\n          },\n        },\n      ],\n    });\n  }\n}\n"},"83ft":function(s,n,a){"use strict";a.r(n),n.default='<button mat-raised-button (click)="openOriginal()">Open Original Dialog</button>\n\n<div *ngIf="animal">\n  You chose: <strong>{{animal}}</strong>\n</div>\n'},"9SlC":function(s,n,a){"use strict";a.r(n),n.default='<h1 id="dialog">Dialog</h1>\n<h2 id="api-reference-for-material-extensions-dialog">API reference for Material Extensions Dialog</h2>\n<p><code>import { MtxDialogModule } from &apos;@ng-matero/extensions/dialog&apos;;</code></p>\n<h3 id="services">Services</h3>\n<h4 id="mtxdialog"><code>MtxDialog</code></h4>\n<h5 id="methods">Methods</h5>\n<p><code>alert</code></p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameter</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>title: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog title.</td>\n</tr>\n<tr>\n<td align="left"><code>description: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog description. Defaulted to <strong><code>&apos;&apos;</code></strong></td>\n</tr>\n<tr>\n<td align="left"><code>onOk: () =&gt; void</code></td>\n<td align="left">The ok callback function. Defaulted to <strong><code>() =&gt; {}</code></strong></td>\n</tr>\n</tbody></table>\n<p><code>confirm</code></p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameter</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>title: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog title.</td>\n</tr>\n<tr>\n<td align="left"><code>description: string | Observable&lt;string&gt;</code></td>\n<td align="left">The dialog description. Defaulted to <strong><code>&apos;&apos;</code></strong></td>\n</tr>\n<tr>\n<td align="left"><code>onOk: () =&gt; void</code></td>\n<td align="left">The ok callback function. Defaulted to <strong><code>() =&gt; {}</code></strong></td>\n</tr>\n<tr>\n<td align="left"><code>onClose: () =&gt; void</code></td>\n<td align="left">The close callback function. Defaulted to <strong><code>() =&gt; {}</code></strong></td>\n</tr>\n</tbody></table>\n<p><code>open</code></p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameter</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>config: MtxDialogData</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n<tr>\n<td align="left"><code>componentOrTemplateRef: ComponentType&lt;T&gt;</code></td>\n<td align="left">The component to load into the dialog. Defaulted to <strong><code>MtxDialogComponent</code></strong></td>\n</tr>\n</tbody></table>\n<p><code>originalOpen</code></p>\n<table>\n<thead>\n<tr>\n<th align="left">Parameter</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left"><code>componentOrTemplateRef: ComponentType&lt;T&gt;</code></td>\n<td align="left">The component to load into the dialog. Defaulted to <strong><code>MtxDialogComponent</code></strong></td>\n</tr>\n<tr>\n<td align="left"><code>config?: MatDialogConfig&lt;D&gt;</code></td>\n<td align="left">The dialog description.</td>\n</tr>\n</tbody></table>\n<h3 id="interfaces">Interfaces</h3>\n<h4 id="dialog-data">Dialog Data</h4>\n<pre class="hljs"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> MtxDialogData <span class="hljs-keyword">extends</span> MatDialogConfig {\n  title?: <span class="hljs-built_in">string</span> | Observable&lt;<span class="hljs-built_in">string</span>&gt;;\n  description?: <span class="hljs-built_in">string</span> | Observable&lt;<span class="hljs-built_in">string</span>&gt;;\n  buttons?: MtxDialogBtns[];\n  showCloseIcon?: <span class="hljs-built_in">boolean</span>;\n}</pre>\n<h4 id="dialog-button">Dialog Button</h4>\n<pre class="hljs">export interface MtxDialogBtns {\n  type?: &apos;&apos; | &apos;raised&apos; | &apos;stroked&apos; | &apos;flat&apos;;\n  color?: &apos;&apos; | &apos;primary&apos; | &apos;accent&apos; | &apos;warn&apos;;\n  class?: string;\n  focusInitial?: boolean;\n  text: string | Observable&lt;string&gt;;\n  onClick?: () =&gt; void;\n}</pre>\n'},Crpi:function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { MtxDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{\n  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> mtxDialog: MtxDialog</span>)</span> {}\n\n  <span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`My name is Zongbin!`</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-function">() =&gt;</span> {\n      <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`Glad to meet you!`</span>);\n    });\n  }\n\n  <span class="hljs-function"><span class="hljs-title">confirm</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.mtxDialog.confirm(\n      <span class="hljs-string">`What&#x27;s your name?`</span>,\n      <span class="hljs-string">&#x27;&#x27;</span>,\n      <span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`Hi, Zongbin!`</span>);\n      },\n      <span class="hljs-function">() =&gt;</span> {\n        <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`I don&#x27;t know.`</span>);\n      }\n    );\n  }\n\n  <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.mtxDialog.open({\n      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;This is the title&#x27;</span>,\n      <span class="hljs-attr">description</span>: <span class="hljs-string">&#x27;You can write some messages here.&#x27;</span>,\n      <span class="hljs-attr">showCloseIcon</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">buttons</span>: [\n        {\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;CLOSE&#x27;</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`You click Close button.`</span>);\n          },\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;VIEW&#x27;</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`You click View button.`</span>);\n          },\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;warn&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;OK&#x27;</span>,\n          <span class="hljs-attr">focusInitial</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {\n            <span class="hljs-built_in">this</span>.mtxDialog.alert(<span class="hljs-string">`You click Ok button.`</span>);\n          },\n        },\n      ],\n    });\n  }\n}\n'},"GuV+":function(s,n){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;defaultlang&quot;</span> (<span class="hljs-attr">change</span>)=<span class="hljs-string">&quot;translate.use($event.value)&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> *<span class="hljs-attr">ngFor</span>=<span class="hljs-string">&quot;let lang of langs&quot;</span> [<span class="hljs-attr">value</span>]=<span class="hljs-string">&quot;lang.value&quot;</span>&gt;</span>\n    {{lang.label}}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Open Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'},KZIv:function(s,n,a){"use strict";a.r(n),n.default='<button mat-raised-button color="warn" (click)="alert()">Alert</button>\n<button mat-raised-button color="accent" (click)="confirm()">Confirm</button>\n<button mat-raised-button color="primary" (click)="open()">Open Dialog</button>\n'},PHnu:function(s,n,a){"use strict";a.r(n),n.default='{\n  "title": "\u8fd9\u662f\u6807\u9898",\n  "description": "\u53ef\u4ee5\u5728\u8fd9\u91cc\u5199\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f",\n  "close": "\u5173\u95ed",\n  "ok": "\u786e\u5b9a",\n  "view": "\u67e5\u770b"\n}\n'},Twtb:function(s,n){s.exports='<span class="hljs-selector-tag">div</span> {\n  <span class="hljs-attribute">padding</span>: <span class="hljs-number">1em</span>;\n}\n'},XYY5:function(s,n,a){"use strict";a.r(n),n.default=".mat-raised-button {\n  margin: 0 .5em;\n}\n"},aXSS:function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component, Inject } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { MtxDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions&#x27;</span>;\n<span class="hljs-keyword">import</span> { MatDialogRef, MAT_DIALOG_DATA } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/material/dialog&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{\n  <span class="hljs-attr">animal</span>: <span class="hljs-built_in">string</span>;\n\n  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> mtxDialog: MtxDialog</span>)</span> {}\n\n  <span class="hljs-function"><span class="hljs-title">openOriginal</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-keyword">const</span> dialogRef = <span class="hljs-built_in">this</span>.mtxDialog.originalOpen(DialogOverviewExampleComponent, {\n      <span class="hljs-attr">width</span>: <span class="hljs-string">&#x27;550px&#x27;</span>,\n      <span class="hljs-attr">data</span>: { <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;nzbin&#x27;</span>, <span class="hljs-attr">animal</span>: <span class="hljs-string">&#x27;panda&#x27;</span> },\n    });\n\n    dialogRef.afterClosed().subscribe(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;The dialog was closed&#x27;</span>);\n      <span class="hljs-built_in">this</span>.animal = result;\n    });\n  }\n}\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-overview&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./dialog.html&#x27;</span>,\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DialogOverviewExampleComponent</span> </span>{\n  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">\n    <span class="hljs-keyword">public</span> dialogRef: MatDialogRef&lt;DialogOverviewExampleComponent&gt;,\n    <span class="hljs-meta">@Inject</span>(MAT_DIALOG_DATA) <span class="hljs-keyword">public</span> data: <span class="hljs-built_in">any</span>\n  </span>)</span> {}\n\n  onNoClick(): <span class="hljs-built_in">void</span> {\n    <span class="hljs-built_in">this</span>.dialogRef.close();\n  }\n}\n'},aZeE:function(s,n){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;openOriginal()&quot;</span>&gt;</span>Open Original Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> *<span class="hljs-attr">ngIf</span>=<span class="hljs-string">&quot;animal&quot;</span>&gt;</span>\n  You chose: <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>{{animal}}<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'},dSiT:function(s,n){s.exports='{\n  <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;\u8fd9\u662f\u6807\u9898&quot;</span>,\n  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;\u53ef\u4ee5\u5728\u8fd9\u91cc\u5199\u4e00\u4e9b\u8be6\u7ec6\u4fe1\u606f&quot;</span>,\n  <span class="hljs-attr">&quot;close&quot;</span>: <span class="hljs-string">&quot;\u5173\u95ed&quot;</span>,\n  <span class="hljs-attr">&quot;ok&quot;</span>: <span class="hljs-string">&quot;\u786e\u5b9a&quot;</span>,\n  <span class="hljs-attr">&quot;view&quot;</span>: <span class="hljs-string">&quot;\u67e5\u770b&quot;</span>\n}\n'},fWa6:function(s,n,a){"use strict";a.r(n),n.default='<mat-radio-group [(ngModel)]="defaultlang" (change)="translate.use($event.value)">\n  <mat-radio-button *ngFor="let lang of langs" [value]="lang.value">\n    {{lang.label}}\n  </mat-radio-button>\n</mat-radio-group>\n\n<button mat-raised-button color="primary" (click)="open()">Open Dialog</button>\n'},gjfF:function(s,n,a){"use strict";a.r(n),n.default=".mat-radio-group {\n  display: block;\n}\n\n.mat-radio-button {\n  margin: 0 1rem 1rem 0;\n}\n"},jJOj:function(s,n){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">mat-dialog-title</span>&gt;</span>Hi, {{ data.name }}<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mat-dialog-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>What&#x27;s your favorite animal?<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;data.animal&quot;</span> /&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">mat-dialog-actions</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;onNoClick()&quot;</span>&gt;</span>No Thanks<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-button</span> [<span class="hljs-attr">mat-dialog-close</span>]=<span class="hljs-string">&quot;data.animal&quot;</span> <span class="hljs-attr">cdkFocusInitial</span>&gt;</span>Ok<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n'},"kwE+":function(s,n,a){"use strict";a.r(n),n.default="import { Component, Inject } from '@angular/core';\nimport { MtxDialog } from '@ng-matero/extensions';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\n\n@Component({\n  selector: 'dialog-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  animal: string;\n\n  constructor(private mtxDialog: MtxDialog) {}\n\n  openOriginal() {\n    const dialogRef = this.mtxDialog.originalOpen(DialogOverviewExampleComponent, {\n      width: '550px',\n      data: { name: 'nzbin', animal: 'panda' },\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('The dialog was closed');\n      this.animal = result;\n    });\n  }\n}\n\n@Component({\n  selector: 'dialog-overview',\n  templateUrl: './dialog.html',\n})\nexport class DialogOverviewExampleComponent {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n}\n"},"ln+C":function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> { MtxDialog } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions&#x27;</span>;\n<span class="hljs-keyword">import</span> { TranslateService } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ngx-translate/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;dialog-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{\n  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"><span class="hljs-keyword">private</span> mtxDialog: MtxDialog, <span class="hljs-keyword">public</span> translate: TranslateService</span>)</span> {\n    translate.addLangs(<span class="hljs-built_in">this</span>.langs.map(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.value));\n    translate.setDefaultLang(<span class="hljs-built_in">this</span>.defaultlang);\n  }\n\n  <span class="hljs-function"><span class="hljs-title">open</span>(<span class="hljs-params"></span>)</span> {\n    <span class="hljs-built_in">this</span>.mtxDialog.open({\n      <span class="hljs-attr">title</span>: <span class="hljs-built_in">this</span>.translate.stream(<span class="hljs-string">&#x27;title&#x27;</span>),\n      <span class="hljs-attr">description</span>: <span class="hljs-built_in">this</span>.translate.stream(<span class="hljs-string">&#x27;description&#x27;</span>),\n      <span class="hljs-attr">buttons</span>: [\n        {\n          <span class="hljs-attr">text</span>: <span class="hljs-built_in">this</span>.translate.stream(<span class="hljs-string">&#x27;close&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;primary&#x27;</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-built_in">this</span>.translate.stream(<span class="hljs-string">&#x27;view&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n        {\n          <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;warn&#x27;</span>,\n          <span class="hljs-attr">focusInitial</span>: <span class="hljs-literal">true</span>,\n          <span class="hljs-attr">text</span>: <span class="hljs-built_in">this</span>.translate.stream(<span class="hljs-string">&#x27;ok&#x27;</span>),\n          <span class="hljs-attr">onClick</span>: <span class="hljs-function">() =&gt;</span> {},\n        },\n      ],\n    });\n  }\n\n  langs = [\n    { <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;\u4e2d\u6587\u7b80\u4f53&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;zh-CN&#x27;</span> },\n    { <span class="hljs-attr">label</span>: <span class="hljs-string">&#x27;English&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;en-US&#x27;</span> },\n  ];\n  defaultlang = <span class="hljs-string">&#x27;zh-CN&#x27;</span>;\n}\n'},"p+mr":function(s,n){s.exports='{\n  <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;This is the title&quot;</span>,\n  <span class="hljs-attr">&quot;description&quot;</span>: <span class="hljs-string">&quot;You can write some messages here&quot;</span>,\n  <span class="hljs-attr">&quot;close&quot;</span>: <span class="hljs-string">&quot;CLOSE&quot;</span>,\n  <span class="hljs-attr">&quot;ok&quot;</span>: <span class="hljs-string">&quot;OK&quot;</span>,\n  <span class="hljs-attr">&quot;view&quot;</span>: <span class="hljs-string">&quot;VIEW&quot;</span>\n}\n'},"p/QY":function(s,n){s.exports='<span class="hljs-selector-class">.mat-raised-button</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span>;\n}\n'},tBmC:function(s,n){s.exports='<span class="hljs-selector-class">.mat-radio-group</span> {\n  <span class="hljs-attribute">display</span>: block;\n}\n\n<span class="hljs-selector-class">.mat-radio-button</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;\n}\n'},tXVn:function(s,n,a){"use strict";a.r(n),n.default="div {\n  padding: 1em;\n}\n"},weF9:function(n,t,l){"use strict";l.r(t),l.d(t,"TranslateHttpLoaderFactory",function(){return A}),l.d(t,"DialogOverviewComponent",function(){return P}),l.d(t,"DialogApiComponent",function(){return N}),l.d(t,"DialogModule",function(){return F});var o,e=l("tyNb"),p=l("OlrJ"),i=l("mqiu"),c=l("tk/3"),r=l("sYmb"),h=l("fXoL"),g=l("H0E5"),u=l("bTqV"),m={title:"Basic confirmation",component:(o=function(){function n(a){s(this,n),this.mtxDialog=a}return a(n,[{key:"alert",value:function(){var s=this;this.mtxDialog.alert("My name is Zongbin!","",function(){s.mtxDialog.alert("Glad to meet you!")})}},{key:"confirm",value:function(){var s=this;this.mtxDialog.confirm("What's your name?","",function(){s.mtxDialog.alert("Hi, Zongbin!")},function(){s.mtxDialog.alert("I don't know.")})}},{key:"open",value:function(){var s=this;this.mtxDialog.open({title:"This is the title",description:"You can write some messages here.",showCloseIcon:!0,buttons:[{text:"CLOSE",onClick:function(){s.mtxDialog.alert("You click Close button.")}},{color:"primary",text:"VIEW",onClick:function(){s.mtxDialog.alert("You click View button.")}},{color:"warn",text:"OK",focusInitial:!0,onClick:function(){s.mtxDialog.alert("You click Ok button.")}}]})}}]),n}(),o.\u0275fac=function(s){return new(s||o)(h.Pb(g.a))},o.\u0275cmp=h.Jb({type:o,selectors:[["dialog-example"]],decls:6,vars:0,consts:[["mat-raised-button","","color","warn",3,"click"],["mat-raised-button","","color","accent",3,"click"],["mat-raised-button","","color","primary",3,"click"]],template:function(s,n){1&s&&(h.Vb(0,"button",0),h.dc("click",function(){return n.alert()}),h.Mc(1,"Alert"),h.Ub(),h.Vb(2,"button",1),h.dc("click",function(){return n.confirm()}),h.Mc(3,"Confirm"),h.Ub(),h.Vb(4,"button",2),h.dc("click",function(){return n.open()}),h.Mc(5,"Open Dialog"),h.Ub())},directives:[u.b],styles:[".mat-raised-button[_ngcontent-%COMP%]{margin:0 .5em}"]}),o),files:[{file:"app.component.html",content:l("ymOi"),filecontent:l("KZIv")},{file:"app.component.ts",content:l("Crpi"),filecontent:l("7C1b")},{file:"app.component.scss",content:l("p/QY"),filecontent:l("XYY5")}]},d=l("0IaG"),j=l("ofXK"),f=l("kmnG"),b=l("qFsG"),x=l("3Pt+");function v(s,n){if(1&s&&(h.Vb(0,"div"),h.Mc(1," You chose: "),h.Vb(2,"strong"),h.Mc(3),h.Ub(),h.Ub()),2&s){var a=h.hc();h.Db(3),h.Nc(a.animal)}}var k,D=function(){var n=function(){function n(a){s(this,n),this.mtxDialog=a}return a(n,[{key:"openOriginal",value:function(){var s=this;this.mtxDialog.originalOpen(w,{width:"550px",data:{name:"nzbin",animal:"panda"}}).afterClosed().subscribe(function(n){console.log("The dialog was closed"),s.animal=n})}}]),n}();return n.\u0275fac=function(s){return new(s||n)(h.Pb(g.a))},n.\u0275cmp=h.Jb({type:n,selectors:[["dialog-example"]],decls:3,vars:1,consts:[["mat-raised-button","",3,"click"],[4,"ngIf"]],template:function(s,n){1&s&&(h.Vb(0,"button",0),h.dc("click",function(){return n.openOriginal()}),h.Mc(1,"Open Original Dialog"),h.Ub(),h.Kc(2,v,4,1,"div",1)),2&s&&(h.Db(2),h.pc("ngIf",n.animal))},directives:[u.b,j.o],styles:["div[_ngcontent-%COMP%]{padding:1em}"]}),n}(),w=((k=function(){function n(a,t){s(this,n),this.dialogRef=a,this.data=t}return a(n,[{key:"onNoClick",value:function(){this.dialogRef.close()}}]),n}()).\u0275fac=function(s){return new(s||k)(h.Pb(d.g),h.Pb(d.a))},k.\u0275cmp=h.Jb({type:k,selectors:[["dialog-overview"]],decls:12,vars:3,consts:[["mat-dialog-title",""],["mat-dialog-content",""],["matInput","",3,"ngModel","ngModelChange"],["mat-dialog-actions",""],["mat-button","",3,"click"],["mat-button","","cdkFocusInitial","",3,"mat-dialog-close"]],template:function(s,n){1&s&&(h.Vb(0,"h1",0),h.Mc(1),h.Ub(),h.Vb(2,"div",1),h.Vb(3,"p"),h.Mc(4,"What's your favorite animal?"),h.Ub(),h.Vb(5,"mat-form-field"),h.Vb(6,"input",2),h.dc("ngModelChange",function(s){return n.data.animal=s}),h.Ub(),h.Ub(),h.Ub(),h.Vb(7,"div",3),h.Vb(8,"button",4),h.dc("click",function(){return n.onNoClick()}),h.Mc(9,"No Thanks"),h.Ub(),h.Vb(10,"button",5),h.Mc(11,"Ok"),h.Ub(),h.Ub()),2&s&&(h.Db(1),h.Oc("Hi, ",n.data.name,""),h.Db(5),h.pc("ngModel",n.data.animal),h.Db(4),h.pc("mat-dialog-close",n.data.animal))},directives:[d.h,d.e,f.c,b.b,x.c,x.k,x.m,d.c,u.b,d.d],encapsulation:2}),k),y={title:"Material original dialog",component:D,files:[{file:"app.component.html",content:l("aZeE"),filecontent:l("83ft")},{file:"app.component.ts",content:l("aXSS"),filecontent:l("kwE+")},{file:"app.component.scss",content:l("Twtb"),filecontent:l("tXVn")},{file:"dialog.html",content:l("jJOj"),filecontent:l("5WGG")}]},C=l("QibW");function q(s,n){if(1&s&&(h.Vb(0,"mat-radio-button",3),h.Mc(1),h.Ub()),2&s){var a=n.$implicit;h.pc("value",a.value),h.Db(1),h.Oc(" ",a.label," ")}}var O={title:"I18n confirmation",component:function(){var n=function(){function n(a,t){s(this,n),this.mtxDialog=a,this.translate=t,this.langs=[{label:"\u4e2d\u6587\u7b80\u4f53",value:"zh-CN"},{label:"English",value:"en-US"}],this.defaultlang="zh-CN",t.addLangs(this.langs.map(function(s){return s.value})),t.setDefaultLang(this.defaultlang)}return a(n,[{key:"open",value:function(){this.mtxDialog.open({title:this.translate.stream("title"),description:this.translate.stream("description"),buttons:[{text:this.translate.stream("close"),onClick:function(){}},{color:"primary",text:this.translate.stream("view"),onClick:function(){}},{color:"warn",focusInitial:!0,text:this.translate.stream("ok"),onClick:function(){}}]})}}]),n}();return n.\u0275fac=function(s){return new(s||n)(h.Pb(g.a),h.Pb(r.c))},n.\u0275cmp=h.Jb({type:n,selectors:[["dialog-example"]],decls:4,vars:2,consts:[[3,"ngModel","ngModelChange","change"],[3,"value",4,"ngFor","ngForOf"],["mat-raised-button","","color","primary",3,"click"],[3,"value"]],template:function(s,n){1&s&&(h.Vb(0,"mat-radio-group",0),h.dc("ngModelChange",function(s){return n.defaultlang=s})("change",function(s){return n.translate.use(s.value)}),h.Kc(1,q,2,2,"mat-radio-button",1),h.Ub(),h.Vb(2,"button",2),h.dc("click",function(){return n.open()}),h.Mc(3,"Open Dialog"),h.Ub()),2&s&&(h.pc("ngModel",n.defaultlang),h.Db(1),h.pc("ngForOf",n.langs))},directives:[C.b,x.k,x.m,j.n,u.b,C.a],styles:[".mat-radio-group[_ngcontent-%COMP%]{display:block}.mat-radio-button[_ngcontent-%COMP%]{margin:0 1rem 1rem 0}"]}),n}(),files:[{file:"app.component.html",content:l("GuV+"),filecontent:l("fWa6")},{file:"app.component.ts",content:l("ln+C"),filecontent:l("2vef")},{file:"app.component.scss",content:l("tBmC"),filecontent:l("gjfF")},{file:"assets/zh-CN.json",content:l("dSiT"),filecontent:l("PHnu")},{file:"assets/en-US.json",content:l("p+mr"),filecontent:l("5tyQ")}]},M=l("FAv5"),T=l("ZpCV"),I=l("Ejav");function _(s,n){if(1&s&&(h.Tb(0),h.Qb(1,"doc-heading",2),h.Qb(2,"example-viewer",3),h.Sb()),2&s){var a=n.$implicit;h.Db(1),h.pc("text",a.title),h.Db(1),h.pc("exampleData",a)}}function U(s,n){if(1&s&&(h.Tb(0),h.Kc(1,_,3,2,"ng-container",1),h.Sb()),2&s){var a=n.ngIf;h.Db(1),h.pc("ngForOf",a.examples)}}function V(s,n){if(1&s&&(h.Tb(0),h.Qb(1,"doc-viewer",1),h.Sb()),2&s){var a=n.ngIf;h.Db(1),h.pc("textContent",a.content.default)}}function A(s){return new i.a(s,"assets/i18n/dialog/","_json")}var E,S,Y,P=((Y=function n(a){s(this,n),this.route=a}).\u0275fac=function(s){return new(s||Y)(h.Pb(e.a))},Y.\u0275cmp=h.Jb({type:Y,selectors:[["app-dialog-overview"]],decls:4,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"text"],[3,"exampleData"]],template:function(s,n){1&s&&(h.Vb(0,"p"),h.Mc(1," The Extensions dialog is a wrapper of Angular Material dialog.\n"),h.Ub(),h.Kc(2,U,2,1,"ng-container",0),h.ic(3,"async")),2&s&&(h.Db(2),h.pc("ngIf",h.jc(3,1,n.route.data)))},directives:[j.o,j.n,M.a,T.a],pipes:[j.b],encapsulation:2}),Y),N=((S=function n(a){s(this,n),this.route=a}).\u0275fac=function(s){return new(s||S)(h.Pb(e.a))},S.\u0275cmp=h.Jb({type:S,selectors:[["app-dialog-api"]],decls:2,vars:3,consts:[[4,"ngIf"],[3,"textContent"]],template:function(s,n){1&s&&(h.Kc(0,V,2,1,"ng-container",0),h.ic(1,"async")),2&s&&h.pc("ngIf",h.jc(1,1,n.route.data))},directives:[j.o,I.a],pipes:[j.b],encapsulation:2}),S),F=((E=function n(){s(this,n)}).\u0275fac=function(s){return new(s||E)},E.\u0275mod=h.Nb({type:E}),E.\u0275inj=h.Mb({imports:[[p.c,r.b.forRoot({loader:{provide:r.a,useFactory:A,deps:[c.b]}}),e.j.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:P,pathMatch:"full",data:{examples:[m,y,O]}},{path:"api",component:N,pathMatch:"full",data:{content:l("9SlC")}},{path:"**",redirectTo:"overview"}])]]}),E)},ymOi:function(s,n){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;warn&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;alert()&quot;</span>&gt;</span>Alert<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;confirm()&quot;</span>&gt;</span>Confirm<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span> (<span class="hljs-attr">click</span>)=<span class="hljs-string">&quot;open()&quot;</span>&gt;</span>Open Dialog<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n'}}])}();