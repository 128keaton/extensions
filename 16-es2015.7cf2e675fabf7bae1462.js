(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{"0/KM":function(s,n){s.exports='<span class="hljs-selector-class">.mat-radio-button</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span>;\n}\n\n<span class="hljs-selector-class">.mat-checkbox</span> {\n  <span class="hljs-attribute">display</span>: inline-block;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;\n}\n\n<span class="hljs-selector-class">.mat-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span> <span class="hljs-number">5em</span>;\n}\n\n<span class="hljs-selector-class">.mat-card</span> {\n  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;\n}\n'},"7ciM":function(s,n){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n<span class="hljs-keyword">import</span> {\n  MtxPopoverPositionX,\n  MtxPopoverPositionY,\n} <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@ng-matero/extensions/popover/popover-types&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;loader-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{\n  <span class="hljs-attr">xPosition</span>: MtxPopoverPositionX = <span class="hljs-string">&#x27;after&#x27;</span>;\n  yPosition: MtxPopoverPositionY = <span class="hljs-string">&#x27;below&#x27;</span>;\n  enterDelay = <span class="hljs-number">200</span>;\n  leaveDelay = <span class="hljs-number">200</span>;\n  xOffset = <span class="hljs-number">0</span>;\n  yOffset = <span class="hljs-number">0</span>;\n  overlapTrigger = <span class="hljs-literal">false</span>;\n  closeOnPanelClick = <span class="hljs-literal">false</span>;\n}\n'},Ejav:function(s,n,a){"use strict";a.d(n,"a",function(){return e});var t=a("fXoL");let e=(()=>{class s{constructor(){this.textContent=""}ngOnDestroy(){}}return s.\u0275fac=function(n){return new(n||s)},s.\u0275cmp=t.Jb({type:s,selectors:[["doc-viewer"]],inputs:{textContent:"textContent"},decls:1,vars:1,consts:[[1,"docs-markdown",3,"innerHTML"]],template:function(s,n){1&s&&t.Qb(0,"div",0),2&s&&t.pc("innerHTML",n.textContent,t.Cc)},styles:[".docs-markdown h1,.docs-markdown h2{font-weight:400}.docs-markdown h3{margin:40px 0 20px;padding-bottom:3px;font-weight:300;font-size:24px;line-height:32px;border-bottom:1px solid rgba(0,0,0,.12)}.docs-markdown h4{display:block;margin-top:28px;margin-bottom:16px;font-weight:700;font-size:20px;background:none}.docs-markdown h4 code{padding:0;background:none}.docs-markdown h5{font-size:15px}.docs-markdown h6{font-size:13px}.docs-markdown table{width:100%;margin:0 0 32px;border-collapse:collapse;border-radius:2px;border-spacing:0;box-shadow:0 2px 2px rgba(0,0,0,.24),0 0 2px rgba(0,0,0,.12)}.docs-markdown th{max-width:100px;padding:13px 16px;background:rgba(0,0,0,.03);font-weight:400;text-align:left}.docs-markdown td{padding:8px 16px;border:1px solid rgba(0,0,0,.03);font-weight:400;font-size:14px}.docs-markdown pre{display:block;margin:16px auto;overflow-x:auto;padding:20px;border-radius:5px;white-space:pre-wrap;background:rgba(0,0,0,.01);border:.5px solid rgba(0,0,0,.2)}"],encapsulation:2}),s})()},IFXQ:function(s,n){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Popover configuration<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>xPosition:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;xPosition&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span>before<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span>after<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>yPosition:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;yPosition&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;above&quot;</span>&gt;</span>above<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;below&quot;</span>&gt;</span>below<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>xOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;xOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>yOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;yOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>enterDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;enterDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>leaveDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;leaveDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>&gt;</span>overlapTrigger<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>&gt;</span>closeOnPanelClick<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Result<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span>\n  Show Popover With Hover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>\n             [<span class="hljs-attr">xPosition</span>]=<span class="hljs-string">&quot;xPosition&quot;</span>\n             [<span class="hljs-attr">yPosition</span>]=<span class="hljs-string">&quot;yPosition&quot;</span>\n             [<span class="hljs-attr">enterDelay</span>]=<span class="hljs-string">&quot;enterDelay&quot;</span>\n             [<span class="hljs-attr">leaveDelay</span>]=<span class="hljs-string">&quot;leaveDelay&quot;</span>\n             [<span class="hljs-attr">xOffset</span>]=<span class="hljs-string">&quot;xOffset&quot;</span>\n             [<span class="hljs-attr">yOffset</span>]=<span class="hljs-string">&quot;yOffset&quot;</span>\n             [<span class="hljs-attr">overlapTrigger</span>]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>\n             [<span class="hljs-attr">closeOnPanelClick</span>]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>\n             [<span class="hljs-attr">closeOnBackdropClick</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-card-content</span>&gt;</span>\n      A material design popover component created using Angular with the Angular CDK.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span>\n        #<span class="hljs-attr">popoverTrigger2</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover2&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>\n  Show Popover With Click\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover2</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>\n             [<span class="hljs-attr">xPosition</span>]=<span class="hljs-string">&quot;xPosition&quot;</span>\n             [<span class="hljs-attr">yPosition</span>]=<span class="hljs-string">&quot;yPosition&quot;</span>\n             [<span class="hljs-attr">xOffset</span>]=<span class="hljs-string">&quot;xOffset&quot;</span>\n             [<span class="hljs-attr">yOffset</span>]=<span class="hljs-string">&quot;yOffset&quot;</span>\n             [<span class="hljs-attr">overlapTrigger</span>]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>\n             [<span class="hljs-attr">closeOnPanelClick</span>]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>\n             [<span class="hljs-attr">closeOnBackdropClick</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-card-content</span>&gt;</span>\n      A material design popover component created using Angular with the Angular CDK.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n'},VAcm:function(s,n,a){"use strict";a.r(n),a.d(n,"PopoverOverviewComponent",function(){return y}),a.d(n,"PopoverApiComponent",function(){return O}),a.d(n,"PopoverModule",function(){return k});var t=a("tyNb"),e=a("OlrJ"),o=a("fXoL"),l=a("QibW"),p=a("3Pt+"),r=a("kmnG"),c=a("qFsG"),i=a("bSwM"),g=a("bTqV"),m=a("z8zN"),h=a("bler"),d=a("Wp6s");const u={title:"Configurable popover",component:(()=>{class s{constructor(){this.xPosition="after",this.yPosition="below",this.enterDelay=200,this.leaveDelay=200,this.xOffset=0,this.yOffset=0,this.overlapTrigger=!1,this.closeOnPanelClick=!1}}return s.\u0275fac=function(n){return new(n||s)},s.\u0275cmp=o.Jb({type:s,selectors:[["loader-example"]],decls:62,vars:26,consts:[[3,"ngModel","ngModelChange"],["value","before"],["value","center"],["value","after"],["value","above"],["value","below"],["matInput","","type","number",3,"ngModel","ngModelChange"],["mat-raised-button","","color","primary","mtxPopoverTriggerOn","hover",3,"mtxPopoverTriggerFor"],["popoverTrigger","mtxPopoverTrigger"],[3,"xPosition","yPosition","enterDelay","leaveDelay","xOffset","yOffset","overlapTrigger","closeOnPanelClick","closeOnBackdropClick"],["popover","mtxPopover"],["mat-raised-button","","color","accent","mtxPopoverTriggerOn","click",3,"mtxPopoverTriggerFor"],["popoverTrigger2","mtxPopoverTrigger"],[3,"xPosition","yPosition","xOffset","yOffset","overlapTrigger","closeOnPanelClick","closeOnBackdropClick"],["popover2","mtxPopover"]],template:function(s,n){if(1&s&&(o.Vb(0,"h2"),o.Mc(1,"Popover configuration"),o.Ub(),o.Vb(2,"section"),o.Vb(3,"label"),o.Mc(4,"xPosition:"),o.Ub(),o.Vb(5,"mat-radio-group",0),o.dc("ngModelChange",function(s){return n.xPosition=s}),o.Vb(6,"mat-radio-button",1),o.Mc(7,"before"),o.Ub(),o.Vb(8,"mat-radio-button",2),o.Mc(9,"center"),o.Ub(),o.Vb(10,"mat-radio-button",3),o.Mc(11,"after"),o.Ub(),o.Ub(),o.Ub(),o.Vb(12,"section"),o.Vb(13,"label"),o.Mc(14,"yPosition:"),o.Ub(),o.Vb(15,"mat-radio-group",0),o.dc("ngModelChange",function(s){return n.yPosition=s}),o.Vb(16,"mat-radio-button",4),o.Mc(17,"above"),o.Ub(),o.Vb(18,"mat-radio-button",5),o.Mc(19,"below"),o.Ub(),o.Ub(),o.Ub(),o.Vb(20,"section"),o.Vb(21,"mat-form-field"),o.Vb(22,"mat-label"),o.Mc(23,"xOffset"),o.Ub(),o.Vb(24,"input",6),o.dc("ngModelChange",function(s){return n.xOffset=s}),o.Ub(),o.Ub(),o.Vb(25,"mat-form-field"),o.Vb(26,"mat-label"),o.Mc(27,"yOffset"),o.Ub(),o.Vb(28,"input",6),o.dc("ngModelChange",function(s){return n.yOffset=s}),o.Ub(),o.Ub(),o.Ub(),o.Vb(29,"section"),o.Vb(30,"mat-form-field"),o.Vb(31,"mat-label"),o.Mc(32,"enterDelay"),o.Ub(),o.Vb(33,"input",6),o.dc("ngModelChange",function(s){return n.enterDelay=s}),o.Ub(),o.Ub(),o.Vb(34,"mat-form-field"),o.Vb(35,"mat-label"),o.Mc(36,"leaveDelay"),o.Ub(),o.Vb(37,"input",6),o.dc("ngModelChange",function(s){return n.leaveDelay=s}),o.Ub(),o.Ub(),o.Ub(),o.Vb(38,"section"),o.Vb(39,"mat-checkbox",0),o.dc("ngModelChange",function(s){return n.overlapTrigger=s}),o.Mc(40,"overlapTrigger"),o.Ub(),o.Ub(),o.Vb(41,"section"),o.Vb(42,"mat-checkbox",0),o.dc("ngModelChange",function(s){return n.closeOnPanelClick=s}),o.Mc(43,"closeOnPanelClick"),o.Ub(),o.Ub(),o.Vb(44,"h2"),o.Mc(45,"Result"),o.Ub(),o.Vb(46,"button",7,8),o.Mc(48," Show Popover With Hover\n"),o.Ub(),o.Vb(49,"mtx-popover",9,10),o.Vb(51,"mat-card"),o.Vb(52,"mat-card-content"),o.Mc(53," A material design popover component created using Angular with the Angular CDK. "),o.Ub(),o.Ub(),o.Ub(),o.Vb(54,"button",11,12),o.Mc(56," Show Popover With Click\n"),o.Ub(),o.Vb(57,"mtx-popover",13,14),o.Vb(59,"mat-card"),o.Vb(60,"mat-card-content"),o.Mc(61," A material design popover component created using Angular with the Angular CDK. "),o.Ub(),o.Ub(),o.Ub()),2&s){const s=o.yc(50),a=o.yc(58);o.Db(5),o.pc("ngModel",n.xPosition),o.Db(10),o.pc("ngModel",n.yPosition),o.Db(9),o.pc("ngModel",n.xOffset),o.Db(4),o.pc("ngModel",n.yOffset),o.Db(5),o.pc("ngModel",n.enterDelay),o.Db(4),o.pc("ngModel",n.leaveDelay),o.Db(2),o.pc("ngModel",n.overlapTrigger),o.Db(3),o.pc("ngModel",n.closeOnPanelClick),o.Db(4),o.pc("mtxPopoverTriggerFor",s),o.Db(3),o.pc("xPosition",n.xPosition)("yPosition",n.yPosition)("enterDelay",n.enterDelay)("leaveDelay",n.leaveDelay)("xOffset",n.xOffset)("yOffset",n.yOffset)("overlapTrigger",n.overlapTrigger)("closeOnPanelClick",n.closeOnPanelClick)("closeOnBackdropClick",!0),o.Db(5),o.pc("mtxPopoverTriggerFor",a),o.Db(3),o.pc("xPosition",n.xPosition)("yPosition",n.yPosition)("xOffset",n.xOffset)("yOffset",n.yOffset)("overlapTrigger",n.overlapTrigger)("closeOnPanelClick",n.closeOnPanelClick)("closeOnBackdropClick",!0)}},directives:[l.b,p.k,p.m,l.a,r.c,r.g,c.b,p.n,p.c,i.a,g.b,m.a,h.a,d.a,d.c],styles:[".mat-radio-button[_ngcontent-%COMP%]{margin:1em}.mat-checkbox[_ngcontent-%COMP%]{display:inline-block;margin:1rem 1rem 1rem 0}.mat-button-base[_ngcontent-%COMP%]{margin:0 .5em 5em}.mat-card[_ngcontent-%COMP%]{max-width:300px}"]}),s})(),files:[{file:"app.component.html",content:a("IFXQ"),filecontent:a("sKfp")},{file:"app.component.ts",content:a("7ciM"),filecontent:a("i0QU")},{file:"app.component.scss",content:a("0/KM"),filecontent:a("Xyvn")}]};var b=a("ofXK"),f=a("ZpCV"),j=a("Ejav");function v(s,n){if(1&s&&(o.Tb(0),o.Qb(1,"example-viewer",2),o.Sb()),2&s){const s=n.$implicit;o.Db(1),o.pc("exampleData",s)}}function x(s,n){if(1&s&&(o.Tb(0),o.Kc(1,v,2,1,"ng-container",1),o.Sb()),2&s){const s=n.ngIf;o.Db(1),o.pc("ngForOf",s.examples)}}function P(s,n){if(1&s&&(o.Tb(0),o.Qb(1,"doc-viewer",1),o.Sb()),2&s){const s=n.ngIf;o.Db(1),o.pc("textContent",s.content.default)}}let y=(()=>{class s{constructor(s){this.route=s}}return s.\u0275fac=function(n){return new(n||s)(o.Pb(t.a))},s.\u0275cmp=o.Jb({type:s,selectors:[["app-popover-overview"]],decls:2,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"exampleData"]],template:function(s,n){1&s&&(o.Kc(0,x,2,1,"ng-container",0),o.ic(1,"async")),2&s&&o.pc("ngIf",o.jc(1,1,n.route.data))},directives:[b.o,b.n,f.a],pipes:[b.b],encapsulation:2}),s})(),O=(()=>{class s{constructor(s){this.route=s}}return s.\u0275fac=function(n){return new(n||s)(o.Pb(t.a))},s.\u0275cmp=o.Jb({type:s,selectors:[["app-popover-api"]],decls:2,vars:3,consts:[[4,"ngIf"],[3,"textContent"]],template:function(s,n){1&s&&(o.Kc(0,P,2,1,"ng-container",0),o.ic(1,"async")),2&s&&o.pc("ngIf",o.jc(1,1,n.route.data))},directives:[b.o,j.a],pipes:[b.b],encapsulation:2}),s})(),k=(()=>{class s{}return s.\u0275fac=function(n){return new(n||s)},s.\u0275mod=o.Nb({type:s}),s.\u0275inj=o.Mb({imports:[[e.c,t.j.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:y,pathMatch:"full",data:{examples:[u]}},{path:"api",component:O,pathMatch:"full",data:{content:a("f5hD")}},{path:"**",redirectTo:"overview"}])]]}),s})()},Xyvn:function(s,n,a){"use strict";a.r(n),n.default=".mat-radio-button {\n  margin: 1em;\n}\n\n.mat-checkbox {\n  display: inline-block;\n  margin: 1rem 1rem 1rem 0;\n}\n\n.mat-button-base {\n  margin: 0 .5em 5em;\n}\n\n.mat-card {\n  max-width: 300px;\n}\n"},ZpCV:function(s,n,a){"use strict";a.d(n,"a",function(){return b});var t=a("fXoL"),e=a("dNgK"),o=a("yeTJ"),l=a("bTqV"),p=a("Qu3c"),r=a("NFeN"),c=a("ofXK"),i=a("wZkO");const g=["demo"];function m(s,n){if(1&s){const s=t.Wb();t.Vb(0,"mat-tab",10),t.Vb(1,"div",11),t.Vb(2,"div",12),t.Vb(3,"button",13),t.dc("click",function(){t.Bc(s);const n=t.yc(8);return t.hc(2).copySource(n)}),t.Vb(4,"mat-icon"),t.Mc(5,"content_copy"),t.Ub(),t.Ub(),t.Ub(),t.Vb(6,"div",14),t.Qb(7,"pre",15,16),t.Ub(),t.Ub(),t.Ub()}if(2&s){const s=n.$implicit;t.pc("label",s.file),t.Db(3),t.pc("matTooltip","Copy example source"),t.Db(4),t.pc("innerHtml",s.content,t.Cc)}}function h(s,n){if(1&s&&(t.Vb(0,"div",8),t.Vb(1,"mat-tab-group"),t.Kc(2,m,9,3,"mat-tab",9),t.Ub(),t.Ub()),2&s){const s=t.hc();t.Db(2),t.pc("ngForOf",s.exampleData.files)}}function d(s,n){if(1&s&&t.Qb(0,"div",17),2&s){const s=t.hc();t.pc("innerHtml",s.exampleData.description,t.Cc)}}function u(s,n){}let b=(()=>{class s{constructor(s,n,a){this.snackbar=s,this.copier=n,this.componentFactoryResolver=a,this.showSource=!1}ngOnInit(){const s=this.componentFactoryResolver.resolveComponentFactory(this.exampleData.component);this.demoComponentRef=this.demoRef.createComponent(s)}ngOnDestroy(){this.demoComponentRef&&this.demoComponentRef.destroy()}toggleSourceView(){this.showSource=!this.showSource}copySource(s){this.copier.copyText(s.innerText)?this.snackbar.open("Code copied","",{duration:2500}):this.snackbar.open("Copy failed. Please try again!","",{duration:2500})}}return s.\u0275fac=function(n){return new(n||s)(t.Pb(e.a),t.Pb(o.a),t.Pb(t.j))},s.\u0275cmp=t.Jb({type:s,selectors:[["example-viewer"]],viewQuery:function(s,n){if(1&s&&t.Pc(g,3,t.R),2&s){let s;t.xc(s=t.ec())&&(n.demoRef=s.first)}},inputs:{type:"type",exampleData:"exampleData"},decls:13,vars:4,consts:[[1,"docs-example-viewer-wrapper"],[1,"docs-example-viewer-title"],[1,"docs-example-viewer-title-spacer"],["mat-icon-button","","type","button",3,"matTooltip","click"],["class","docs-example-viewer-source",4,"ngIf"],[1,"docs-example-viewer-body"],[3,"innerHtml",4,"ngIf"],["demo",""],[1,"docs-example-viewer-source"],[3,"label",4,"ngFor","ngForOf"],[3,"label"],[1,"docs-example-source-wrapper"],[1,"button-bar"],["mat-icon-button","","type","button","title","Copy example source","aria-label","Copy example source to clipboard",1,"docs-example-source-copy","docs-example-button",3,"matTooltip","click"],[1,"code-snippet"],[1,"docs-example-source",3,"innerHtml"],["textContent",""],[3,"innerHtml"]],template:function(s,n){1&s&&(t.Vb(0,"div",0),t.Vb(1,"div",1),t.Vb(2,"span"),t.Mc(3),t.Ub(),t.Qb(4,"div",2),t.Vb(5,"button",3),t.dc("click",function(){return n.toggleSourceView()}),t.Vb(6,"mat-icon"),t.Mc(7,"code"),t.Ub(),t.Ub(),t.Ub(),t.Kc(8,h,3,1,"div",4),t.Vb(9,"div",5),t.Kc(10,d,1,1,"div",6),t.Kc(11,u,0,0,"ng-template",null,7,t.Lc),t.Ub(),t.Ub()),2&s&&(t.Db(3),t.Nc(n.exampleData.title),t.Db(2),t.pc("matTooltip","View source"),t.Db(3),t.pc("ngIf",n.showSource),t.Db(2),t.pc("ngIf",n.exampleData.description))},directives:[l.b,p.a,r.a,c.o,i.b,c.n,i.a],styles:["[_nghost-%COMP%]{display:block;padding:20px 0}.docs-example-viewer-wrapper[_ngcontent-%COMP%]{border-radius:4px}.docs-example-viewer-title[_ngcontent-%COMP%]{display:flex;align-content:center;align-items:center;justify-content:center;padding:8px 8px 8px 16px}.docs-example-viewer-title-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.docs-example-viewer-body[_ngcontent-%COMP%]{padding:30px}.button-bar[_ngcontent-%COMP%]{float:right;padding:8px}.code-snippet[_ngcontent-%COMP%]{padding:20px}.docs-example-source[_ngcontent-%COMP%]{padding:0;margin:0;border:none;background:none;font-size:14px}"]}),s})()},f5hD:function(s,n,a){"use strict";a.r(n),n.default='<h1 id="popover">popover</h1>\n<h2 id="api-reference-for-material-extensions-popover">API reference for Material Extensions Popover</h2>\n<p><code>import { MtxPopoverModule } from &apos;@ng-matero/extensions/popover&apos;;</code></p>\n<h3 id="directives">Directives</h3>\n<h4 id="mtxpopover"><code>MtxPopover</code></h4>\n<p>Selector: <code>[mtx-popover]</code></p>\n<p>Exported as: <code>mtxPopover</code></p>\n<h5 id="properties">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">@Input() <code>xPosition: &apos;after&apos; | &apos;before&apos; | &apos;center&apos;</code></td>\n<td align="left">Position of the popover in the X axis. Defaults to <strong><code>&apos;after&apos;</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>yPosition: &apos;top&apos; | &apos;below&apos;</code></td>\n<td align="left">Position of the popover in the Y axis. Defaults to <strong><code>&apos;below&apos;</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>enterDelay: number</code></td>\n<td align="left">Popover enter delay. Only support hover event. Defaults to <strong><code>100</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>leaveDelay: number</code></td>\n<td align="left">Popover enter delay. Only support hover event. Defaults to <strong><code>100</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>xOffset: number</code></td>\n<td align="left">Popover target offset X. Defaults to <strong><code>0</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>yOffset: number</code></td>\n<td align="left">Popover target offset Y. Defaults to <strong><code>0</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>overlapTrigger: boolean</code></td>\n<td align="left">Whether overlap trigger. Defaults to <strong><code>false</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>closeOnPanelClick: boolean</code></td>\n<td align="left">Whether close popover when click the panel. Defaults to <strong><code>false</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>closeOnBackdropClick: boolean</code></td>\n<td align="left">Whether close popover when click the backdrop. Defaults to <strong><code>true</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>focusTrapEnabled: boolean</code></td>\n<td align="left">Whether the popover should focus trap. Defaults to <strong><code>true</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>focusTrapAutoCaptureEnabled: boolean</code></td>\n<td align="left">Whether the popover should focus trap auto capture focus. Defaults to <strong><code>true</code></strong></td>\n</tr>\n</tbody></table>\n<h4 id="mtxpopovertrigger">MtxPopoverTrigger</h4>\n<p>Selector: <code>[mtxPopoverTriggerFor]</code></p>\n<p>Exported as: <code>mtxPopoverTrigger</code></p>\n<h5 id="properties-1">Properties</h5>\n<table>\n<thead>\n<tr>\n<th align="left">Name</th>\n<th align="left">Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">@Input() <code>mtxPopoverTriggerFor: MtxPopoverPanel</code></td>\n<td align="left">References the popover instance that the trigger is associated with.</td>\n</tr>\n<tr>\n<td align="left">@Input() <code>mtxPopoverTriggerOn: MtxPopoverTriggerEvent</code></td>\n<td align="left">Event for triggering popover click, hover and none. Defaults to <strong><code>&apos;hover&apos;</code></strong></td>\n</tr>\n<tr>\n<td align="left">@Input() <code>mtxPopoverTargetAt: MtxTarget</code></td>\n<td align="left">References the popover target instance that the popover positioning is associated with.</td>\n</tr>\n</tbody></table>\n'},i0QU:function(s,n,a){"use strict";a.r(n),n.default="import { Component } from '@angular/core';\nimport {\n  MtxPopoverPositionX,\n  MtxPopoverPositionY,\n} from '@ng-matero/extensions/popover/popover-types';\n\n@Component({\n  selector: 'loader-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  xPosition: MtxPopoverPositionX = 'after';\n  yPosition: MtxPopoverPositionY = 'below';\n  enterDelay = 200;\n  leaveDelay = 200;\n  xOffset = 0;\n  yOffset = 0;\n  overlapTrigger = false;\n  closeOnPanelClick = false;\n}\n"},sKfp:function(s,n,a){"use strict";a.r(n),n.default='<h2>Popover configuration</h2>\n\n<section>\n  <label>xPosition:</label>\n  <mat-radio-group [(ngModel)]="xPosition">\n    <mat-radio-button value="before">before</mat-radio-button>\n    <mat-radio-button value="center">center</mat-radio-button>\n    <mat-radio-button value="after">after</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <label>yPosition:</label>\n  <mat-radio-group [(ngModel)]="yPosition">\n    <mat-radio-button value="above">above</mat-radio-button>\n    <mat-radio-button value="below">below</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>xOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="xOffset">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>yOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="yOffset">\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>enterDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="enterDelay">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>leaveDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="leaveDelay">\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="overlapTrigger">overlapTrigger</mat-checkbox>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="closeOnPanelClick">closeOnPanelClick</mat-checkbox>\n</section>\n\n<h2>Result</h2>\n\n<button mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        mtxPopoverTriggerOn="hover">\n  Show Popover With Hover\n</button>\n\n<mtx-popover #popover="mtxPopover"\n             [xPosition]="xPosition"\n             [yPosition]="yPosition"\n             [enterDelay]="enterDelay"\n             [leaveDelay]="leaveDelay"\n             [xOffset]="xOffset"\n             [yOffset]="yOffset"\n             [overlapTrigger]="overlapTrigger"\n             [closeOnPanelClick]="closeOnPanelClick"\n             [closeOnBackdropClick]="true">\n  <mat-card>\n    <mat-card-content>\n      A material design popover component created using Angular with the Angular CDK.\n    </mat-card-content>\n  </mat-card>\n</mtx-popover>\n\n<button mat-raised-button color="accent"\n        #popoverTrigger2="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover2"\n        mtxPopoverTriggerOn="click">\n  Show Popover With Click\n</button>\n\n<mtx-popover #popover2="mtxPopover"\n             [xPosition]="xPosition"\n             [yPosition]="yPosition"\n             [xOffset]="xOffset"\n             [yOffset]="yOffset"\n             [overlapTrigger]="overlapTrigger"\n             [closeOnPanelClick]="closeOnPanelClick"\n             [closeOnBackdropClick]="true">\n  <mat-card>\n    <mat-card-content>\n      A material design popover component created using Angular with the Angular CDK.\n    </mat-card-content>\n  </mat-card>\n</mtx-popover>\n'}}]);