(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"/8KD":function(s,a,n){"use strict";n.d(a,"a",function(){return j});var t=n("fXoL"),e=n("dNgK"),l=n("yeTJ"),o=n("bTqV"),p=n("Qu3c"),c=n("NFeN"),r=n("ofXK"),i=n("wZkO");const g=["demo"];function m(s,a){if(1&s){const s=t.Vb();t.Ub(0,"mat-tab",10),t.Ub(1,"div",11),t.Ub(2,"div",12),t.Ub(3,"button",13),t.cc("click",function(){t.Ac(s);const a=t.xc(8);return t.gc(2).copySource(a)}),t.Ub(4,"mat-icon"),t.Lc(5,"content_copy"),t.Tb(),t.Tb(),t.Tb(),t.Ub(6,"div",14),t.Pb(7,"pre",15,16),t.Tb(),t.Tb(),t.Tb()}if(2&s){const s=a.$implicit;t.oc("label",s.file),t.Cb(3),t.oc("matTooltip","Copy example source"),t.Cb(4),t.oc("innerHtml",s.content,t.Bc)}}function h(s,a){if(1&s&&(t.Ub(0,"div",8),t.Ub(1,"mat-tab-group"),t.Jc(2,m,9,3,"mat-tab",9),t.Tb(),t.Tb()),2&s){const s=t.gc();t.Cb(2),t.oc("ngForOf",s.exampleData.files)}}function u(s,a){if(1&s&&t.Pb(0,"div",17),2&s){const s=t.gc();t.oc("innerHtml",s.exampleData.description,t.Bc)}}function b(s,a){}let j=(()=>{class s{constructor(s,a,n){this.snackbar=s,this.copier=a,this.componentFactoryResolver=n,this.showSource=!1}ngOnInit(){const s=this.componentFactoryResolver.resolveComponentFactory(this.exampleData.component);this.demoComponentRef=this.demoRef.createComponent(s)}ngOnDestroy(){this.demoComponentRef&&this.demoComponentRef.destroy()}toggleSourceView(){this.showSource=!this.showSource}copySource(s){this.copier.copyText(s.innerText)?this.snackbar.open("Code copied","",{duration:2500}):this.snackbar.open("Copy failed. Please try again!","",{duration:2500})}}return s.\u0275fac=function(a){return new(a||s)(t.Ob(e.a),t.Ob(l.a),t.Ob(t.j))},s.\u0275cmp=t.Ib({type:s,selectors:[["example-viewer"]],viewQuery:function(s,a){if(1&s&&t.Oc(g,3,t.R),2&s){let s;t.wc(s=t.dc())&&(a.demoRef=s.first)}},inputs:{type:"type",exampleData:"exampleData"},decls:13,vars:4,consts:[[1,"docs-example-viewer-wrapper"],[1,"docs-example-viewer-title"],[1,"docs-example-viewer-title-spacer"],["mat-icon-button","","type","button",3,"matTooltip","click"],["class","docs-example-viewer-source",4,"ngIf"],[1,"docs-example-viewer-body"],[3,"innerHtml",4,"ngIf"],["demo",""],[1,"docs-example-viewer-source"],[3,"label",4,"ngFor","ngForOf"],[3,"label"],[1,"docs-example-source-wrapper"],[1,"button-bar"],["mat-icon-button","","type","button","title","Copy example source","aria-label","Copy example source to clipboard",1,"docs-example-source-copy","docs-example-button",3,"matTooltip","click"],[1,"code-snippet"],[1,"docs-example-source",3,"innerHtml"],["textContent",""],[3,"innerHtml"]],template:function(s,a){1&s&&(t.Ub(0,"div",0),t.Ub(1,"div",1),t.Ub(2,"span"),t.Lc(3),t.Tb(),t.Pb(4,"div",2),t.Ub(5,"button",3),t.cc("click",function(){return a.toggleSourceView()}),t.Ub(6,"mat-icon"),t.Lc(7,"code"),t.Tb(),t.Tb(),t.Tb(),t.Jc(8,h,3,1,"div",4),t.Ub(9,"div",5),t.Jc(10,u,1,1,"div",6),t.Jc(11,b,0,0,"ng-template",null,7,t.Kc),t.Tb(),t.Tb()),2&s&&(t.Cb(3),t.Mc(a.exampleData.title),t.Cb(2),t.oc("matTooltip","View source"),t.Cb(3),t.oc("ngIf",a.showSource),t.Cb(2),t.oc("ngIf",a.exampleData.description))},directives:[o.b,p.a,c.a,r.o,i.b,r.n,i.a],styles:["[_nghost-%COMP%]{display:block;padding:20px 0}.docs-example-viewer-wrapper[_ngcontent-%COMP%]{border-radius:4px}.docs-example-viewer-title[_ngcontent-%COMP%]{display:flex;align-content:center;align-items:center;justify-content:center;padding:8px 8px 8px 16px}.docs-example-viewer-title-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.docs-example-viewer-body[_ngcontent-%COMP%]{padding:30px}.button-bar[_ngcontent-%COMP%]{float:right;padding:8px}.code-snippet[_ngcontent-%COMP%]{padding:20px}.docs-example-source[_ngcontent-%COMP%]{padding:0;margin:0;border:none;background:none;font-size:14px}"]}),s})()},"0/KM":function(s,a){s.exports='<span class="hljs-selector-class">.mat-radio-button</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1em</span>;\n}\n\n<span class="hljs-selector-class">.mat-checkbox</span> {\n  <span class="hljs-attribute">display</span>: inline-block;\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;\n}\n\n<span class="hljs-selector-class">.mat-button-base</span> {\n  <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> .<span class="hljs-number">5em</span> <span class="hljs-number">5em</span>;\n}\n\n<span class="hljs-selector-class">.mat-card</span> {\n  <span class="hljs-attribute">max-width</span>: <span class="hljs-number">300px</span>;\n}\n'},"7ciM":function(s,a){s.exports='<span class="hljs-keyword">import</span> { Component } <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@angular/core&#x27;</span>;\n\n<span class="hljs-meta">@Component</span>({\n  <span class="hljs-attr">selector</span>: <span class="hljs-string">&#x27;loader-example&#x27;</span>,\n  <span class="hljs-attr">templateUrl</span>: <span class="hljs-string">&#x27;./app.component.html&#x27;</span>,\n  <span class="hljs-attr">styleUrls</span>: [<span class="hljs-string">&#x27;./app.component.scss&#x27;</span>],\n})\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppComponent</span> </span>{\n  xPosition = <span class="hljs-string">&#x27;after&#x27;</span>;\n  yPosition = <span class="hljs-string">&#x27;below&#x27;</span>;\n  enterDelay = <span class="hljs-number">200</span>;\n  leaveDelay = <span class="hljs-number">200</span>;\n  xOffset = <span class="hljs-number">0</span>;\n  yOffset = <span class="hljs-number">0</span>;\n  overlapTrigger = <span class="hljs-literal">false</span>;\n  closeOnPanelClick = <span class="hljs-literal">false</span>;\n}\n'},IFXQ:function(s,a){s.exports='<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Popover configuration<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>xPosition:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;xPosition&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;before&quot;</span>&gt;</span>before<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span>center<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;after&quot;</span>&gt;</span>after<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>yPosition:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-group</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;yPosition&quot;</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;above&quot;</span>&gt;</span>above<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-radio-button</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;below&quot;</span>&gt;</span>below<span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-radio-group</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>xOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;xOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>yOffset<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;yOffset&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>enterDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;enterDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-form-field</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-label</span>&gt;</span>leaveDelay<span class="hljs-tag">&lt;/<span class="hljs-name">mat-label</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">matInput</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;leaveDelay&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-form-field</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>&gt;</span>overlapTrigger<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-checkbox</span> [(<span class="hljs-attr">ngModel</span>)]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>&gt;</span>closeOnPanelClick<span class="hljs-tag">&lt;/<span class="hljs-name">mat-checkbox</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Result<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;primary&quot;</span>\n        #<span class="hljs-attr">popoverTrigger</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;hover&quot;</span>&gt;</span>\n  Show Popover With Hover\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>\n             [<span class="hljs-attr">xPosition</span>]=<span class="hljs-string">&quot;xPosition&quot;</span>\n             [<span class="hljs-attr">yPosition</span>]=<span class="hljs-string">&quot;yPosition&quot;</span>\n             [<span class="hljs-attr">enterDelay</span>]=<span class="hljs-string">&quot;enterDelay&quot;</span>\n             [<span class="hljs-attr">leaveDelay</span>]=<span class="hljs-string">&quot;leaveDelay&quot;</span>\n             [<span class="hljs-attr">xOffset</span>]=<span class="hljs-string">&quot;xOffset&quot;</span>\n             [<span class="hljs-attr">yOffset</span>]=<span class="hljs-string">&quot;yOffset&quot;</span>\n             [<span class="hljs-attr">overlapTrigger</span>]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>\n             [<span class="hljs-attr">closeOnPanelClick</span>]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>\n             [<span class="hljs-attr">closeOnBackdropClick</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-card-content</span>&gt;</span>\n      A material design popover component created using Angular with the Angular CDK.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">mat-raised-button</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;accent&quot;</span>\n        #<span class="hljs-attr">popoverTrigger2</span>=<span class="hljs-string">&quot;mtxPopoverTrigger&quot;</span>\n        [<span class="hljs-attr">mtxPopoverTriggerFor</span>]=<span class="hljs-string">&quot;popover2&quot;</span>\n        <span class="hljs-attr">mtxPopoverTriggerOn</span>=<span class="hljs-string">&quot;click&quot;</span>&gt;</span>\n  Show Popover With Click\n<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>\n\n<span class="hljs-tag">&lt;<span class="hljs-name">mtx-popover</span> #<span class="hljs-attr">popover2</span>=<span class="hljs-string">&quot;mtxPopover&quot;</span>\n             [<span class="hljs-attr">xPosition</span>]=<span class="hljs-string">&quot;xPosition&quot;</span>\n             [<span class="hljs-attr">yPosition</span>]=<span class="hljs-string">&quot;yPosition&quot;</span>\n             [<span class="hljs-attr">xOffset</span>]=<span class="hljs-string">&quot;xOffset&quot;</span>\n             [<span class="hljs-attr">yOffset</span>]=<span class="hljs-string">&quot;yOffset&quot;</span>\n             [<span class="hljs-attr">overlapTrigger</span>]=<span class="hljs-string">&quot;overlapTrigger&quot;</span>\n             [<span class="hljs-attr">closeOnPanelClick</span>]=<span class="hljs-string">&quot;closeOnPanelClick&quot;</span>\n             [<span class="hljs-attr">closeOnBackdropClick</span>]=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">mat-card</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">mat-card-content</span>&gt;</span>\n      A material design popover component created using Angular with the Angular CDK.\n    <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card-content</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">mat-card</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">mtx-popover</span>&gt;</span>\n'},VAcm:function(s,a,n){"use strict";n.r(a),n.d(a,"PopoverOverviewComponent",function(){return x}),n.d(a,"PopoverApiComponent",function(){return y}),n.d(a,"PopoverModule",function(){return P});var t=n("tyNb"),e=n("OlrJ"),l=n("fXoL"),o=n("QibW"),p=n("3Pt+"),c=n("kmnG"),r=n("qFsG"),i=n("bSwM"),g=n("bTqV"),m=n("z8zN"),h=n("bler"),u=n("Wp6s");const b={title:"Configurable popover",component:(()=>{class s{constructor(){this.xPosition="after",this.yPosition="below",this.enterDelay=200,this.leaveDelay=200,this.xOffset=0,this.yOffset=0,this.overlapTrigger=!1,this.closeOnPanelClick=!1}}return s.\u0275fac=function(a){return new(a||s)},s.\u0275cmp=l.Ib({type:s,selectors:[["loader-example"]],decls:62,vars:26,consts:[[3,"ngModel","ngModelChange"],["value","before"],["value","center"],["value","after"],["value","above"],["value","below"],["matInput","","type","number",3,"ngModel","ngModelChange"],["mat-raised-button","","color","primary","mtxPopoverTriggerOn","hover",3,"mtxPopoverTriggerFor"],["popoverTrigger","mtxPopoverTrigger"],[3,"xPosition","yPosition","enterDelay","leaveDelay","xOffset","yOffset","overlapTrigger","closeOnPanelClick","closeOnBackdropClick"],["popover","mtxPopover"],["mat-raised-button","","color","accent","mtxPopoverTriggerOn","click",3,"mtxPopoverTriggerFor"],["popoverTrigger2","mtxPopoverTrigger"],[3,"xPosition","yPosition","xOffset","yOffset","overlapTrigger","closeOnPanelClick","closeOnBackdropClick"],["popover2","mtxPopover"]],template:function(s,a){if(1&s&&(l.Ub(0,"h2"),l.Lc(1,"Popover configuration"),l.Tb(),l.Ub(2,"section"),l.Ub(3,"label"),l.Lc(4,"xPosition:"),l.Tb(),l.Ub(5,"mat-radio-group",0),l.cc("ngModelChange",function(s){return a.xPosition=s}),l.Ub(6,"mat-radio-button",1),l.Lc(7,"before"),l.Tb(),l.Ub(8,"mat-radio-button",2),l.Lc(9,"center"),l.Tb(),l.Ub(10,"mat-radio-button",3),l.Lc(11,"after"),l.Tb(),l.Tb(),l.Tb(),l.Ub(12,"section"),l.Ub(13,"label"),l.Lc(14,"yPosition:"),l.Tb(),l.Ub(15,"mat-radio-group",0),l.cc("ngModelChange",function(s){return a.yPosition=s}),l.Ub(16,"mat-radio-button",4),l.Lc(17,"above"),l.Tb(),l.Ub(18,"mat-radio-button",5),l.Lc(19,"below"),l.Tb(),l.Tb(),l.Tb(),l.Ub(20,"section"),l.Ub(21,"mat-form-field"),l.Ub(22,"mat-label"),l.Lc(23,"xOffset"),l.Tb(),l.Ub(24,"input",6),l.cc("ngModelChange",function(s){return a.xOffset=s}),l.Tb(),l.Tb(),l.Ub(25,"mat-form-field"),l.Ub(26,"mat-label"),l.Lc(27,"yOffset"),l.Tb(),l.Ub(28,"input",6),l.cc("ngModelChange",function(s){return a.yOffset=s}),l.Tb(),l.Tb(),l.Tb(),l.Ub(29,"section"),l.Ub(30,"mat-form-field"),l.Ub(31,"mat-label"),l.Lc(32,"enterDelay"),l.Tb(),l.Ub(33,"input",6),l.cc("ngModelChange",function(s){return a.enterDelay=s}),l.Tb(),l.Tb(),l.Ub(34,"mat-form-field"),l.Ub(35,"mat-label"),l.Lc(36,"leaveDelay"),l.Tb(),l.Ub(37,"input",6),l.cc("ngModelChange",function(s){return a.leaveDelay=s}),l.Tb(),l.Tb(),l.Tb(),l.Ub(38,"section"),l.Ub(39,"mat-checkbox",0),l.cc("ngModelChange",function(s){return a.overlapTrigger=s}),l.Lc(40,"overlapTrigger"),l.Tb(),l.Tb(),l.Ub(41,"section"),l.Ub(42,"mat-checkbox",0),l.cc("ngModelChange",function(s){return a.closeOnPanelClick=s}),l.Lc(43,"closeOnPanelClick"),l.Tb(),l.Tb(),l.Ub(44,"h2"),l.Lc(45,"Result"),l.Tb(),l.Ub(46,"button",7,8),l.Lc(48," Show Popover With Hover\n"),l.Tb(),l.Ub(49,"mtx-popover",9,10),l.Ub(51,"mat-card"),l.Ub(52,"mat-card-content"),l.Lc(53," A material design popover component created using Angular with the Angular CDK. "),l.Tb(),l.Tb(),l.Tb(),l.Ub(54,"button",11,12),l.Lc(56," Show Popover With Click\n"),l.Tb(),l.Ub(57,"mtx-popover",13,14),l.Ub(59,"mat-card"),l.Ub(60,"mat-card-content"),l.Lc(61," A material design popover component created using Angular with the Angular CDK. "),l.Tb(),l.Tb(),l.Tb()),2&s){const s=l.xc(50),n=l.xc(58);l.Cb(5),l.oc("ngModel",a.xPosition),l.Cb(10),l.oc("ngModel",a.yPosition),l.Cb(9),l.oc("ngModel",a.xOffset),l.Cb(4),l.oc("ngModel",a.yOffset),l.Cb(5),l.oc("ngModel",a.enterDelay),l.Cb(4),l.oc("ngModel",a.leaveDelay),l.Cb(2),l.oc("ngModel",a.overlapTrigger),l.Cb(3),l.oc("ngModel",a.closeOnPanelClick),l.Cb(4),l.oc("mtxPopoverTriggerFor",s),l.Cb(3),l.oc("xPosition",a.xPosition)("yPosition",a.yPosition)("enterDelay",a.enterDelay)("leaveDelay",a.leaveDelay)("xOffset",a.xOffset)("yOffset",a.yOffset)("overlapTrigger",a.overlapTrigger)("closeOnPanelClick",a.closeOnPanelClick)("closeOnBackdropClick",!0),l.Cb(5),l.oc("mtxPopoverTriggerFor",n),l.Cb(3),l.oc("xPosition",a.xPosition)("yPosition",a.yPosition)("xOffset",a.xOffset)("yOffset",a.yOffset)("overlapTrigger",a.overlapTrigger)("closeOnPanelClick",a.closeOnPanelClick)("closeOnBackdropClick",!0)}},directives:[o.b,p.k,p.m,o.a,c.c,c.g,r.b,p.n,p.c,i.a,g.b,m.a,h.a,u.a,u.c],styles:[".mat-radio-button[_ngcontent-%COMP%]{margin:1em}.mat-checkbox[_ngcontent-%COMP%]{display:inline-block;margin:1rem 1rem 1rem 0}.mat-button-base[_ngcontent-%COMP%]{margin:0 .5em 5em}.mat-card[_ngcontent-%COMP%]{max-width:300px}"]}),s})(),files:[{file:"app.component.html",content:n("IFXQ"),filecontent:n("sKfp")},{file:"app.component.ts",content:n("7ciM"),filecontent:n("i0QU")},{file:"app.component.scss",content:n("0/KM"),filecontent:n("Xyvn")}]};var j=n("ofXK"),f=n("/8KD");function d(s,a){if(1&s&&(l.Sb(0),l.Pb(1,"example-viewer",2),l.Rb()),2&s){const s=a.$implicit;l.Cb(1),l.oc("exampleData",s)}}function v(s,a){if(1&s&&(l.Sb(0),l.Jc(1,d,2,1,"ng-container",1),l.Rb()),2&s){const s=a.ngIf;l.Cb(1),l.oc("ngForOf",s.examples)}}let x=(()=>{class s{constructor(s){this.route=s}}return s.\u0275fac=function(a){return new(a||s)(l.Ob(t.a))},s.\u0275cmp=l.Ib({type:s,selectors:[["app-popover-overview"]],decls:2,vars:3,consts:[[4,"ngIf"],[4,"ngFor","ngForOf"],[3,"exampleData"]],template:function(s,a){1&s&&(l.Jc(0,v,2,1,"ng-container",0),l.hc(1,"async")),2&s&&l.oc("ngIf",l.ic(1,1,a.route.data))},directives:[j.o,j.n,f.a],pipes:[j.b],encapsulation:2}),s})(),y=(()=>{class s{constructor(s){this.route=s}}return s.\u0275fac=function(a){return new(a||s)(l.Ob(t.a))},s.\u0275cmp=l.Ib({type:s,selectors:[["app-popover-api"]],decls:1,vars:0,template:function(s,a){1&s&&l.Lc(0,"Coming soon\n")},encapsulation:2}),s})(),P=(()=>{class s{}return s.\u0275mod=l.Mb({type:s}),s.\u0275inj=l.Lb({factory:function(a){return new(a||s)},imports:[[e.c,t.j.forChild([{path:"",redirectTo:"overview",pathMatch:"full"},{path:"overview",component:x,pathMatch:"full",data:{examples:[b]}},{path:"api",component:y,pathMatch:"full"},{path:"**",redirectTo:"overview"}])]]}),s})()},Xyvn:function(s,a,n){"use strict";n.r(a),a.default=".mat-radio-button {\n  margin: 1em;\n}\n\n.mat-checkbox {\n  display: inline-block;\n  margin: 1rem 1rem 1rem 0;\n}\n\n.mat-button-base {\n  margin: 0 .5em 5em;\n}\n\n.mat-card {\n  max-width: 300px;\n}\n"},i0QU:function(s,a,n){"use strict";n.r(a),a.default="import { Component } from '@angular/core';\n\n@Component({\n  selector: 'loader-example',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  xPosition = 'after';\n  yPosition = 'below';\n  enterDelay = 200;\n  leaveDelay = 200;\n  xOffset = 0;\n  yOffset = 0;\n  overlapTrigger = false;\n  closeOnPanelClick = false;\n}\n"},sKfp:function(s,a,n){"use strict";n.r(a),a.default='<h2>Popover configuration</h2>\n\n<section>\n  <label>xPosition:</label>\n  <mat-radio-group [(ngModel)]="xPosition">\n    <mat-radio-button value="before">before</mat-radio-button>\n    <mat-radio-button value="center">center</mat-radio-button>\n    <mat-radio-button value="after">after</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <label>yPosition:</label>\n  <mat-radio-group [(ngModel)]="yPosition">\n    <mat-radio-button value="above">above</mat-radio-button>\n    <mat-radio-button value="below">below</mat-radio-button>\n  </mat-radio-group>\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>xOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="xOffset">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>yOffset</mat-label>\n    <input matInput type="number" [(ngModel)]="yOffset">\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-form-field>\n    <mat-label>enterDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="enterDelay">\n  </mat-form-field>\n  <mat-form-field>\n    <mat-label>leaveDelay</mat-label>\n    <input matInput type="number" [(ngModel)]="leaveDelay">\n  </mat-form-field>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="overlapTrigger">overlapTrigger</mat-checkbox>\n</section>\n\n<section>\n  <mat-checkbox [(ngModel)]="closeOnPanelClick">closeOnPanelClick</mat-checkbox>\n</section>\n\n<h2>Result</h2>\n\n<button mat-raised-button color="primary"\n        #popoverTrigger="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover"\n        mtxPopoverTriggerOn="hover">\n  Show Popover With Hover\n</button>\n\n<mtx-popover #popover="mtxPopover"\n             [xPosition]="xPosition"\n             [yPosition]="yPosition"\n             [enterDelay]="enterDelay"\n             [leaveDelay]="leaveDelay"\n             [xOffset]="xOffset"\n             [yOffset]="yOffset"\n             [overlapTrigger]="overlapTrigger"\n             [closeOnPanelClick]="closeOnPanelClick"\n             [closeOnBackdropClick]="true">\n  <mat-card>\n    <mat-card-content>\n      A material design popover component created using Angular with the Angular CDK.\n    </mat-card-content>\n  </mat-card>\n</mtx-popover>\n\n<button mat-raised-button color="accent"\n        #popoverTrigger2="mtxPopoverTrigger"\n        [mtxPopoverTriggerFor]="popover2"\n        mtxPopoverTriggerOn="click">\n  Show Popover With Click\n</button>\n\n<mtx-popover #popover2="mtxPopover"\n             [xPosition]="xPosition"\n             [yPosition]="yPosition"\n             [xOffset]="xOffset"\n             [yOffset]="yOffset"\n             [overlapTrigger]="overlapTrigger"\n             [closeOnPanelClick]="closeOnPanelClick"\n             [closeOnBackdropClick]="true">\n  <mat-card>\n    <mat-card-content>\n      A material design popover component created using Angular with the Angular CDK.\n    </mat-card-content>\n  </mat-card>\n</mtx-popover>\n'}}]);